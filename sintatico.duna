// Comentário de uma linha
/*
  / Comentário
  /* multi-
  ** -linha
*/

usize e;
f32 f = 0;
static u16 g;
const char h = 'h';

typedef i16 myint;

// Struct v1
struct Pessoa {
  string nome;
  u16 idade;
}

// Union
union yylval {
  i32 iValue;    
  f32 fValue;
  string sValue;
  char cValue;
}

// Enum
enum Cor {
  VERMELHO,
  VERDE,
  AZUL
}

enum Cor2 {
  VERMELHO = 0,
  VERDE = 1,
  AZUL,
}

// Proc v1
proc testeSintatico () {}

// Proc v2
proc testeComParam (i16 i) {
  i16 x = i;
}

proc testeComParams (i16 i, bool isTrue) {
  i16 x = i;
  if(true) {}
}

// Func v1
func retorna1() : i8 {
  return 1;
}

// Func v3
func equals(string msg, string msg2) : bool {}

// Proc main
proc main() {
  print "Olá, mundo!";

  bool a;
  bool b = false;
  static u16 c;
  const u32 d = 0;

  // Declaração v1
  i16 num;

  // Atribuição v1
  a = true;
  // Atribuição v2
  b = a;

  // Testando ponteiros e arrays
  i32* @ptr;
  []i16 arr;

  // Declaração v3
  static string msg;

  // Declaração v4
  const i16 idade = 23;

  // Multiqualifier declaração v4
  const static bool isOpen = false;

  // Testando typedef
  int maioridade = 18;

  // If v1
  if(true) {
    maioridade = 21;
  }

  // If v2
  if(false) {
    int yy = 2;
  } else if(true) {
    //
  }

  // If v3
  if(true) {
    //
  }
  else {
    b = false;
  }

  // If v4
  if(true) {
    //
  }
  else if (false) {
    b = false;
  }
  else if (false) {
    //
  }
  else {
    //
  }

  // While
  while(true) {}

  // Foreach v1
  foreach(i16 element2 : arr) {}

  // Foreach v2
  foreach(const i16 element : arr) {}

  i32 compound = 0;

  compound += 2;
  compound *= 2;
  compound -= 2;
  compound /= 2;

  testeSintatico();
  i8 valor1 = retorna1();

  [3]i8 arr1;
  []i8 arr2 = {0,1,2,3};
  arr1[0] = 20;
  i8 valor2 = arr2[2];

  i8* @ptr;
  i8* @ptr2 = null;
  @ptr = new i8;
  *@ptr = 10;
  
  for(;;) {
    break;
  }
  for(;;valor2 += 1) {
    continue;
  }
  for(;valor2 < 10; valor2 += 1) {
    testeSintatico();
  }
  for(i8 i = 0;i < 10; i += 1) {
    testeSintatico();
  }
  for(i8 j = 0; j < 20;) {
    j += 1;
  }
  for(;valor2 < 10;) {
    valor2 += 1;
  }

  match(valor2) {
    1 | 2 => {  testeSintatico(); },
    5 => { },
    _ => { *@ptr = valor2; }
  }

  match(valor2) {
    1 | 2 => {  testeSintatico(); },
    5 => { },
    _ => { *@ptr = valor2; },
  }

  delete @ptr;

  // Expressões
  i32 expr1 = testeSintatico();
  bool* @expr2 = new bool;
  i8 expr3 = arr2[2];
  []u8 expr4 = {1, 2, 3, 9,};
  Cor expr5 = Cor::AZUL;
  Pessoa expr6 = Pessoa {
    nome: "Fulano",
    idade: 21,
  };
  u16 expr7 = expr6.idade;
  expr6.idade = 18;
  *@expr2 = false;
  bool expr8 = *@expr2;
  char expr9 = 'c';

  bool expr10 = false or true;
  bool expr11 = true and true;

  bool expr12 = 2 < 3;
  bool expr13 = 2 > 3;
  bool expr14 = 5 <= 2;
  bool expr15 = 5 >= 2;
  bool expr16 = true == true;
  bool expr17 = 2 != 3;

  i32 expr18 = 1 + 2;
  i32 expr19 = 1 - 2;
  i32 expr20 = 1 * 2;
  i32 expr21 = 1 / 2;
  i32 expr22 = 1 % 2;

  string expr23 = cast<string>(2);
  string expr24 = cast<string>(2, @expr2);

  string* @expr23 = &expr24;
  bool expr24 = not true;
  u32 expr25 = +2;
  i32 expr26 = -2;
  usize expr27 = #expr4;
  i32 expr28 = (1010);
}